package wordcount;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.util.Scanner;
import java.io.File;  
  
/*
        File file = new File("E:\\Workspaces\\MyEclipse 6.5\\spring_source");//指定统计目录  
        int count = getLineCount(file);  
        System.out.println(count);  
    }  
  
    static int count = 0;  
    public static int getLineCount(File file){  
        for(File f:file.listFiles()){  
            //判断是否为目录，若是则递归调用  递归调用的入口  
            if(f.isDirectory()){  
                getLineCount(f);  
            }  
            //判断是否为java文件，若是则统计该文件的行数 递归调用的出口  
            else if(f.isFile()&&f.getName().endsWith(".java")){  
                count+=FileUtils.getLineCount(f);  
            }  
        }  
          
        return count;  
    }  */
      

	/*
	 * InputStreamReader(new FileInputStream(绝对文件名))进行文件的读取
	 * BufferedReader(文件读取)调用readLine()的方法
	 */

	public class wc {
		public static boolean writeFile(String path,String content){
    		try{
    			OutputStream out = new FileOutputStream(path);
    			out.write(content.getBytes());
    			out.close();
    			return true;
    		}catch(Exception e){
    			e.printStackTrace();
    			return false;
    		}
    		
		}
		public void fileOutputStream() {
		    File file = new File("./mywork/work.txt");
		    FileOutputStream out = null;
		    try {
		        if (!file.exists()) {
		            // 先得到文件的上级目录，并创建上级目录，在创建文件
		            file.getParentFile().mkdir();
		            file.createNewFile();
		        }

		        //创建文件输出流
		        out = new FileOutputStream(file);
		        //将字符串转化为字节
		        byte[] byteArr = "FileInputStream Test".getBytes();
		        out.write(byteArr);
		        out.close();
		    } catch (FileNotFoundException e) {
		        e.printStackTrace();
		    } catch (IOException e) {
		        e.printStackTrace();
		    }

		}
	 public static void main(String[] args) throws Exception {
		 
		    int countChar = 0;
		    int countWord = 0;
		    int countLine = 0;
		    String outputPath="E:/wordCount/result.txt";
		    Scanner input = new Scanner(System.in);
		    System.out.println("please input filePath or folderPath:");
		    String path = input.nextLine();
		   // System.out.println("please input OutputPath,If you want to take the default path,please enter a blank space");
		    //String outputPath1=input.nextLine();
		   // System.out.print(outputPath1);
		    //if(outputPath1!=" "){
		    	//outputPath=outputPath1;
		   //}
			InputStreamReader isr = new InputStreamReader(new FileInputStream(path));
		      	  //InputStreamReader将字符流向字节流转换。
			//InputStreamReader isr = new InputStreamReader(new FileInputStream(绝对文件名));
			 //用来读取文件中的数据
			 BufferedReader br = new BufferedReader(isr);//使用缓冲区，可以使用缓冲区的read(),readLine()方法；
			 /*readLine每次读取一行，read()读取整个文件，
			   读入的数据要注意有/r或/n或/r/n
			  */
		    String s=null;
		    while((s =br.readLine())!= null)//不可用read()=-1判断！！因为会跳过行首第一个字符！！
		          {
		          	  // System.out.print(s+"\n");
		          	   countChar += s.length();//.length()
		          	   //length() 方法用于返回字符串的长度。
		          	   //长度等于字符串中 16 位 Unicode 代码单元的数量。
		          	   //是针对字符串的，一个字符就占一个长度，无论这个字符是中文还是英文
		          	   //countWord += s.split(",").length;
		          	   countWord += s.split(" |,|	|\n").length;//split() 方法用于把一个字符串分割成字符串数组,字符串数组的长度，就是单词个数
		          	   countLine++;//因为是按行读取，所以每次增加一即可计算出行的数目
		          	  }
		          	  isr.close();//关闭文件 C:\Users\liaotaiwei\Desktop\test.c
		          	 
		          	writeFile(outputPath,"char cont "+countChar);
		          	writeFile(outputPath,"word count "+countWord );
		          	writeFile(outputPath,"line count "+countLine);
		          	  
		          	
		            }
		          	  }  
		            
		        
		          
		   
	  
	  //System.out.println(path);
	 // File file = new File(path);
	  //getWC(file);

	
